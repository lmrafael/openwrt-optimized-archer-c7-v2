--- a/target/linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
+++ b/target/linux/ath79/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
@@ -173,18 +173,17 @@
 	int ring_size = BIT(ring->order);
 	int ring_mask = BIT(ring->order) - 1;
 	unsigned int i;
-	int ret;
+	int ret = 0;
 
-	ret = 0;
 	for (i = 0; i < ring_size; i++) {
 		struct ag71xx_desc *desc = ag71xx_ring_desc(ring, i);
 
 		desc->next = (u32) (ring->descs_dma +
 			AG71XX_DESC_SIZE * ((i + 1) & ring_mask));
 
-		DBG("ag71xx: RX desc at %p, next is %08x\n",
+/*		DBG("ag71xx: RX desc at %p, next is %08x\n",
 			desc, desc->next);
-	}
+*/	}
 
 	for (i = 0; i < ring_size; i++) {
 		struct ag71xx_desc *desc = ag71xx_ring_desc(ring, i);
@@ -211,10 +210,9 @@
 {
 	struct ag71xx_ring *ring = &ag->rx_ring;
 	int ring_mask = BIT(ring->order) - 1;
-	unsigned int count;
+	unsigned int count = 0;
 	int offset = ag->rx_buf_offset;
 
-	count = 0;
 	for (; ring->curr - ring->dirty > 0; ring->dirty++) {
 		struct ag71xx_desc *desc;
 		unsigned int i;
@@ -234,7 +232,7 @@
 	/* flush descriptors */
 	wmb();
 
-	DBG("%s: %u rx descriptors refilled\n", ag->dev->name, count);
+//	DBG("%s: %u rx descriptors refilled\n", ag->dev->name, count);
 
 	return count;
 }
@@ -653,7 +651,7 @@
 			ag71xx_speed_str(ag),
 			(DUPLEX_FULL == ag->duplex) ? "Full" : "Half");
 
-	DBG("%s: fifo_cfg0=%#x, fifo_cfg1=%#x, fifo_cfg2=%#x\n",
+/*	DBG("%s: fifo_cfg0=%#x, fifo_cfg1=%#x, fifo_cfg2=%#x\n",
 		ag->dev->name,
 		ag71xx_rr(ag, AG71XX_REG_FIFO_CFG0),
 		ag71xx_rr(ag, AG71XX_REG_FIFO_CFG1),
@@ -668,7 +666,7 @@
 	DBG("%s: mac_cfg2=%#x, mac_ifctl=%#x\n",
 		ag->dev->name,
 		ag71xx_rr(ag, AG71XX_REG_MAC_CFG2),
-		ag71xx_rr(ag, AG71XX_REG_MAC_IFCTL));
+		ag71xx_rr(ag, AG71XX_REG_MAC_IFCTL));*/
 }
 
 void ag71xx_link_adjust(struct ag71xx *ag)
@@ -810,7 +808,7 @@
 	int i, n, ring_min;
 
 	if (skb->len <= 4) {
-		DBG("%s: packet len is too small\n", ag->dev->name);
+//		DBG("%s: packet len is too small\n", ag->dev->name);
 		goto err_drop;
 	}
 
@@ -844,11 +842,11 @@
 	    ring_min *= AG71XX_TX_RING_DS_PER_PKT;
 
 	if (ring->curr - ring->dirty >= ring_size - ring_min) {
-		DBG("%s: tx queue full\n", dev->name);
+//		DBG("%s: tx queue full\n", dev->name);
 		netif_stop_queue(dev);
 	}
 
-	DBG("%s: packet injected into TX queue\n", ag->dev->name);
+//	DBG("%s: packet injected into TX queue\n", ag->dev->name);
 
 	/* enable TX engine */
 	ag71xx_wr(ag, AG71XX_REG_TX_CTRL, TX_CTRL_TXE);
@@ -972,7 +970,7 @@
 	int bytes_compl = 0;
 	int n = 0;
 
-	DBG("%s: processing TX ring\n", ag->dev->name);
+//	DBG("%s: processing TX ring\n", ag->dev->name);
 
 	while (ring->dirty + n != ring->curr) {
 		unsigned int i = (ring->dirty + n) & ring_mask;
@@ -1009,7 +1007,7 @@
 		}
 	}
 
-	DBG("%s: %d packets sent out\n", ag->dev->name, sent);
+//	DBG("%s: %d packets sent out\n", ag->dev->name, sent);
 
 	if (!sent)
 		return 0;
@@ -1039,8 +1037,8 @@
 	struct sk_buff *skb;
 	int done = 0;
 
-	DBG("%s: rx packets, limit=%d, curr=%u, dirty=%u\n",
-			dev->name, limit, ring->curr, ring->dirty);
+//	DBG("%s: rx packets, limit=%d, curr=%u, dirty=%u\n",
+//			dev->name, limit, ring->curr, ring->dirty);
 
 	skb_queue_head_init(&queue);
 
@@ -1101,8 +1099,8 @@
 		netif_receive_skb(skb);
 	}
 
-	DBG("%s: rx finish, curr=%u, dirty=%u, done=%d\n",
-		dev->name, ring->curr, ring->dirty, done);
+//	DBG("%s: rx finish, curr=%u, dirty=%u, done=%d\n",
+//		dev->name, ring->curr, ring->dirty, done);
 
 	return done;
 }
@@ -1120,7 +1118,7 @@
 
 	tx_done = ag71xx_tx_packets(ag, false);
 
-	DBG("%s: processing RX ring\n", dev->name);
+//	DBG("%s: processing RX ring\n", dev->name);
 	rx_done = ag71xx_rx_packets(ag, limit);
 
 	ag71xx_debugfs_update_napi_stats(ag, rx_done, tx_done);
@@ -1145,8 +1143,8 @@
 		if (status & TX_STATUS_PS)
 			goto more;
 
-		DBG("%s: disable polling mode, rx=%d, tx=%d,limit=%d\n",
-			dev->name, rx_done, tx_done, limit);
+//		DBG("%s: disable polling mode, rx=%d, tx=%d,limit=%d\n",
+//			dev->name, rx_done, tx_done, limit);
 
 		napi_complete(napi);
 
@@ -1158,8 +1156,8 @@
 	}
 
 more:
-	DBG("%s: stay in polling mode, rx=%d, tx=%d, limit=%d\n",
-			dev->name, rx_done, tx_done, limit);
+//	DBG("%s: stay in polling mode, rx=%d, tx=%d, limit=%d\n",
+//			dev->name, rx_done, tx_done, limit);
 	return limit;
 
 oom:
@@ -1196,7 +1194,7 @@
 
 	if (likely(status & AG71XX_INT_POLL)) {
 		ag71xx_int_disable(ag, AG71XX_INT_POLL);
-		DBG("%s: enable polling mode\n", dev->name);
+//		DBG("%s: enable polling mode\n", dev->name);
 		napi_schedule(&ag->napi);
 	}
 
